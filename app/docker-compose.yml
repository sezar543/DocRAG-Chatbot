services:
  streamlit:
    build:
      context: .
      dockerfile: Dockerfile.streamlit
    environment:
      - UPLOAD_URL=http://fastapi:8000/uploadfile/
      - DELETE_URL=http://fastapi:8000/deletefile/
      - CHAT_URL=http://fastapi:8000/query
      - TRANSFORMERS_CACHE=/models
    ports:
      - "8501:8501"
    depends_on:
      - fastapi
      - postgres
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - ./models:/models

  fastapi:
    build:
      context: .
      dockerfile: Dockerfile.fastapi
    ports:
      - "8000:8000"
    depends_on:
      - postgres
    entrypoint: ["./wait-for-it.sh", "postgres", "5432", "--", "uvicorn", "fastapi_app:app", "--host", "0.0.0.0", "--port", "8000"]
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - UPLOAD_URL=http://fastapi:8000/uploadfile/
      - DELETE_URL=http://fastapi:8000/deletefile/
      - CHAT_URL=http://fastapi:8000/query
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
      - TRANSFORMERS_CACHE=/models
    deploy:
      resources:
        reservations:
          devices:
            - capabilities: [gpu]
    runtime: nvidia
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://fastapi:8000/"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - ./models:/models

  postgres:
    build:
      context: .
      dockerfile: Dockerfile.postgres
    container_name: postgres_db
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - PGDATA= /var/lib/postgresql/data/pgdata
      # - POSTGRES_HOST_AUTH_METHOD=trust
    ports:
      - "5432:5432"
    volumes:
      - ./init_db.sh:/docker-entrypoint-initdb.d/init_db.sh
      - ./logs:/docker-entrypoint-initdb.d/logs
      # - ./postgres-data:/var/lib/postgresql/data  # Ensure data persistence
      - pgdata:/var/lib/postgresql/data
    networks:
      - app_network
volumes:
  pgdata:

networks:
  app_network:
    driver: bridge